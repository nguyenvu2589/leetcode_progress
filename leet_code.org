* LEET CODE
# C-c C-c to run stats
#+begin_src emacs-lisp :colnames '(freq tags)
(count-tags)
#+end_src

#+RESULTS:
| freq | tags       |
|------+------------|
|   25 | PYTHON     |
|   22 | EASY       |
|   10 | BELOW50    |
|    4 | MEDIUM     |
|    3 | BINARYTREE |
|    1 | SQL        |
|    1 | SAMPLE     |

** 1. Number of Steps to Reduce a Number to Zero                :EASY:PYTHON:
   :LOGBOOK:
   CLOCK: [2020-07-09 Thu 15:52]--[2020-07-09 Thu 16:06] =>  0:14
   :END:
  - link: https://leetcode.com/problems/number-of-steps-to-reduce-a-number-to-zero/ 

** 2. How Many Numbers Are Smaller Than the Current Number      :EASY:PYTHON:
   :LOGBOOK:
   CLOCK: [2020-07-09 Thu 16:07]--[2020-07-09 Thu 16:20] =>  0:13
   :END:
  - link: https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/
    
** 3. Decompress Run-Length Encoded List                        :EASY:PYTHON:
   :LOGBOOK:
   CLOCK: [2020-07-10 Fri 16:16]--[2020-07-10 Fri 16:42] =>  0:26
   CLOCK: [2020-07-10 Fri 16:14]--[2020-07-10 Fri 16:15] =>  0:01
   :END:
   - link: https://leetcode.com/problems/decompress-run-length-encoded-list/

** 4. Subtract the Product and Sum of Digits of an Integer      :EASY:PYTHON:
   :LOGBOOK:
   CLOCK: [2020-07-10 Fri 16:45]--[2020-07-10 Fri 17:02] =>  0:17
   :END:
   - link: https://leetcode.com/problems/subtract-the-product-and-sum-of-digits-of-an-integer/

** 5. Create Target Array in the Given Order                    :EASY:PYTHON:
   :LOGBOOK:
   CLOCK: [2020-07-10 Fri 17:10]--[2020-07-10 Fri 17:29] =>  0:19
   :END:
   - link: https://leetcode.com/problems/create-target-array-in-the-given-order/

** 6. Split a String in Balanced Strings                        :EASY:PYTHON:
  :LOGBOOK:
  CLOCK: [2020-07-10 Fri 17:49]--[2020-07-10 Fri 18:00] =>  0:11
  :END:
  - link: https://leetcode.com/problems/split-a-string-in-balanced-strings/

** 7. Find Numbers with Even Number of Digits                   :EASY:PYTHON:
   :LOGBOOK:
   CLOCK: [2020-07-10 Fri 23:44]--[2020-07-10 Fri 23:50] =>  0:06
   :END:
   - link: https://leetcode.com/problems/find-numbers-with-even-number-of-digits/

** 8. Reformat Department Table                                    :EASY:SQL:
   :LOGBOOK:
   CLOCK: [2020-07-12 Sun 16:28]--[2020-07-12 Sun 16:40] =>  0:12
   :END:
   - link: https://leetcode.com/problems/reformat-department-table/
   - convert row into column
   - sum(if(month = "Jan", revenue, NULL)) as Jan_Revenue
** 9. Minimum Time Visiting All Points                          :EASY:PYTHON:
   :LOGBOOK:
   CLOCK: [2020-07-12 Sun 22:46]--[2020-07-12 Sun 23:04] =>  0:18
   :END:
   - link: https://leetcode.com/problems/minimum-time-visiting-all-points/
** 10. Running Sum of 1d Array                                  :EASY:PYTHON:
   :LOGBOOK:
   CLOCK: [2020-07-12 Sun 23:07]--[2020-07-12 Sun 23:19] =>  0:12
   :END:
   - link: https://leetcode.com/problems/running-sum-of-1d-array/
** 11. Number of Students Doing Homework at a Given Time        :EASY:PYTHON:
   :LOGBOOK:
   CLOCK: [2020-07-12 Sun 23:23]--[2020-07-12 Sun 23:35] =>  0:12
   :END:
   - link: https://leetcode.com/problems/number-of-students-doing-homework-at-a-given-time/
** 12. Number of Days Between Two Dates                         :EASY:PYTHON:
   :LOGBOOK:
   CLOCK: [2020-07-12 Sun 23:39]--[2020-07-12 Sun 23:47] =>  0:08
   :END:
   - link: https://leetcode.com/problems/number-of-days-between-two-dates/
** 13. Assign Cookies                                  :EASY:PYTHON:BELOW50:
   :LOGBOOK:
   CLOCK: [2020-07-13 Mon 22:09]--[2020-07-13 Mon 23:05] =>  0:56
   :END:
   - link: https://leetcode.com/problems/assign-cookies/
** 14. Kth Largest Element in a Stream                 :EASY:PYTHON:BELOW50:
   :LOGBOOK:
   CLOCK: [2020-07-13 Mon 23:10]--[2020-07-13 Mon 23:39] =>  0:29
   :END:
   - link: https://leetcode.com/problems/kth-largest-element-in-a-stream/
** 15. Positions of Large Groups                       :EASY:PYTHON:BELOW50:
   :LOGBOOK:
   CLOCK: [2020-07-14 Tue 23:15]--[2020-07-14 Tue 23:40] =>  0:25
   :END:
   - link: https://leetcode.com/problems/positions-of-large-groups/
** 16. Number of 1 bits                                :EASY:PYTHON:BELOW50:
   :LOGBOOK:
   CLOCK: [2020-07-17 Fri 22:47]--[2020-07-17 Fri 23:00] =>  0:13
   :END:
  - link: https://leetcode.com/problems/number-of-1-bits/
  - list.count()
** 17. Day of the Year                                 :EASY:PYTHON:BELOW50:
   :LOGBOOK:
   CLOCK: [2020-07-17 Fri 23:00]--[2020-07-17 Fri 23:10] =>  0:10
   :END:
   - link: https://leetcode.com/problems/day-of-the-year/
** 18. Rectangle Overlap                               :EASY:PYTHON:BELOW50:
   :LOGBOOK:
   CLOCK: [2020-07-17 Fri 22:35]--[2020-07-17 Fri 23:00] =>  0:25
   :END:
   - link: https://leetcode.com/problems/rectangle-overlap/
** 19. Pascal's Triangle II                            :EASY:PYTHON:BELOW50:
   :LOGBOOK:
   CLOCK: [2020-07-20 Mon 22:36]--[2020-07-20 Mon 23:23] =>  0:47
   :END:
   - link: https://leetcode.com/problems/pascals-triangle-ii/
   - calculate current value in pascals triangle:
     cur_value = (pre_value * (row - col +1)) / col
** 20. Bit and 2-bit Characters                        :EASY:PYTHON:BELOW50:
   :LOGBOOK:
   CLOCK: [2020-07-21 Tue 21:46]--[2020-07-21 Tue 22:13] =>  0:27
   :END:
   - link: https://leetcode.com/problems/1-bit-and-2-bit-characters/ 
** 21. Reverse String II                               :EASY:PYTHON:BELOW50:
   :LOGBOOK:
   CLOCK: [2020-07-21 Tue 22:15]--[2020-07-21 Tue 23:13] =>  0:58
   :END:
   - link: https://leetcode.com/problems/reverse-string-ii/
** 22. Longest Word in Dictionary                       :EASY:PYTHON:BELOW50:
   :LOGBOOK:
   CLOCK: [2020-07-22 Wed 22:33]--[2020-07-22 Wed 22:47] =>  0:14
   CLOCK: [2020-07-22 Wed 22:27]--[2020-07-22 Wed 22:33] =>  0:06
   CLOCK: [2020-07-22 Wed 21:13]--[2020-07-22 Wed 22:00] =>  0:47
   :END:
   - link: https://leetcode.com/problems/longest-word-in-dictionary/
** 23. Find a Corresponding Node of a Binary Tree in a Clone of That Tree :MEDIUM:PYTHON:BINARYTREE:
   :LOGBOOK:
   CLOCK: [2020-07-22 Wed 22:59]--[2020-07-22 Wed 23:16] =>  0:17
   :END:
   - link: https://leetcode.com/problems/find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree/ 
** 24. Sum of Nodes with Even-Valued Grandparent :MEDIUM:PYTHON:BINARYTREE:SAMPLE:
   :LOGBOOK:
   CLOCK: [2020-07-22 Wed 23:25]--[2020-07-22 Wed 23:52] =>  0:27
   :END:
   - link: https://leetcode.com/problems/sum-of-nodes-with-even-valued-grandparent/
** 25. Deepest Leaves Sum                   :MEDIUM:PYTHON:BINARYTREE:
   :LOGBOOK:
   CLOCK: [2020-07-23 Thu 18:39]--[2020-07-23 Thu 19:30] =>  0:51
   :END:
   - link: https://leetcode.com/problems/deepest-leaves-sum/ 

** 26. Count Number of Teams                                  :MEDIUM:PYTHON:
   :LOGBOOK:
   CLOCK: [2020-07-23 Thu 21:16]--[2020-07-23 Thu 21:59] =>  0:43
   :END:
   - link: https://leetcode.com/problems/count-number-of-teams/ 

** 27. Combination Sum                             :MEDIUM:PYTHON:BELOW50:
   :LOGBOOK:
   CLOCK: [2020-07-27 Mon 22:36]--[2020-07-27 Mon 23:19] =>  0:43
   :END:
   - link: https://leetcode.com/problems/combination-sum/

** 28. Combination Sum II                             :MEDIUM:PYTHON:BELOW50:
   :LOGBOOK:
   CLOCK: [2020-07-27 Mon 23:43]--[2020-07-28 Tue 00:23] =>  0:40
   :END:
   - link: https://leetcode.com/problems/combination-sum-ii/ 



* NOTE
#+NAME: graph
#+BEGIN_SRC python
graph = {'A': ['B', 'C', 'E'],
          'B': ['A','D', 'E'],
          'C': ['A', 'F', 'G'],
          'D': ['B'],
          'E': ['A', 'B','D'],
          'F': ['C'],
          'G': ['C']
  }
#+END_SRC

** BFS

#+BEGIN_SRC python :results output :print python :noweb yes
<<graph>>
def bfs( s, graph): 
	q = [s]
	visited = []

	while q:
		val = q.pop(0)
		if val not in visited:
			visited.append(val)
			q.extend(x for x in graph[val])
	return visited

result = bfs('A', graph)
print(result)
#+END_SRC

#+RESULTS:
: ['A', 'B', 'C', 'E', 'D', 'F', 'G']

** BFS_shortest

#+begin_src python :results output :noweb yes
<<graph>>
def bfs_shortest_path(graph, start, goal):
	if start == goal:
		return [start]

	q = [[ start ]]
	visited = []

	while q:
		path = q.pop(0)
		node = path[-1]
		if node not in visited:
			neighbours = graph[node]
			for neighbour in neighbours:
				new_path = list(path)
				new_path.append(neighbour)
				q.append(new_path)
				if neighbour == goal:
					return new_path
			visited.append(node)
	return []

result = bfs_shortest_path(graph, 'G', 'D')
print(result)
#+end_src

#+RESULTS:
: ['G', 'C', 'A', 'B', 'D']


** Backtrack

#+begin_src python :results output :noweb yes
candidates = [2,3,6,7]
target = 7
res = []
def dfs(idx, cur, path):
    if cur > target:
        return
    if cur == target:
        res.append(path)
        return
    for i in range(idx, len(candidates)):
        dfs(i, cur+ candidates[i], path + [candidates[i]])
dfs(0,0,[])
print(res)
#+end_src

#+RESULTS:
: [[2, 2, 3], [7]]
